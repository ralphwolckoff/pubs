// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https/pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://e_com_h6hw_user:9uIsSKipMb27KaUpuSPaJlZsLDtoXjgH@dpg-d32ke7ripnbc73d93rkg-a.oregon-postgres.render.com/e_com_h6hw"
}

enum Role {
  CLIENT
  VENDOR
  ADMIN
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  refreshToken String?

  onboardingIsCompleted Boolean @default(false)

  role      Role     @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]

  store     Store?
  address   Address?
  profile   Profile?
  @@map("user")
}

model Profile {
  id          String    @id @default(uuid())
  firstName String?
  lastName  String?
  photoUrl    String?   
  bio         String?
  phoneNumber Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  @@map("profile")
}

model Address {
  id          String    @id @default(uuid())
  street      String
  city       String
  state      String
  zipCode    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])

  order  Order[]
  @@map("address")
}

model Store {
  id          String    @id @default(uuid())
  name        String    @unique
  address     String?
  logo        String?
  description String?
  userId      String    @unique
  
  user        User      @relation(fields: [userId], references: [id])
  products    Product[]
  categories  Category[]
  orders      Order[]
  promotions  Promotion[]
  @@map("store")
}

model Product {
  id          String      @id @default(uuid())
  storeId     String?
  categoryId  String?
  name        String      @unique
  price       Decimal     @db.Decimal(10, 2)
  stock       Int
  description String?
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  sizeId      String?
  colorId     String?

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  store       Store?      @relation(fields: [storeId], references: [id], onDelete: SetNull)
  category    Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  images      Image[]
  size        Size?       @relation(fields: [sizeId], references: [id], onDelete: SetNull)
  color       Color?      @relation(fields: [colorId], references: [id], onDelete: SetNull)
  orderItems  OrderItem[]
  promotions  Promotion[] @relation("ProductToPromotion")
  @@map("product")
}

model Size {
  id        String    @id @default(uuid())
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  products  Product[]
  @@map("size")
}

model Color {
  id        String    @id @default(uuid())
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  products  Product[]
  @@map("color")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  storeId     String

  store       Store     @relation(fields: [storeId], references: [id])
  products    Product[]
  @@map("category")
}

model Image {
  id          String    @id @default(uuid())
  url         String
  altText     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  @@map("images")
}



model Order {
  id          String      @id @default(uuid())
  orderNumber String    @unique @default(cuid())
  status  OrderStatus @default(PENDING)
  totalAmount Float
  shippingAddress String?
  paymentMethod String
  mobileMoneyNumber Int?

  addressId  String?
  address    Address? @relation(fields: [addressId], references: [id]) 

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  store   Store  @relation(fields: [storeId], references: [id])
  storeId String

  items   OrderItem[]
  @@map("order")
}

model OrderItem {
  id           String   @id @default(uuid())
  quantity     Int
  priceAtOrder Float 
  createdAt    DateTime @default(now())

  order        Order   @relation(fields: [orderId], references: [id])
  orderId      String

  // Relation avec le produit
  product      Product @relation(fields: [productId], references: [id])
  productId    String

  @@unique([orderId, productId])
  @@map("orderItem")

}

model Promotion {
  id                String   @id @default(cuid())
  productName       String

  discountPercentage Int
  finalPrice        Float
  deadline          DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relation 1:1 avec Message
  message          Message? @relation("PromotionToMessage")

  storeId          String?
  store            Store?    @relation(fields: [storeId], references: [id], onDelete: SetNull)

  productId       String
  product         Product   @relation("ProductToPromotion", fields: [productId], references: [id], onDelete: Cascade)
  @@map("promotion")
}

model Message {
  id                String    @id @default(uuid())
  messageTitle      String
  messageContent    String

  // Clé étrangère unique vers Promotion (assure la relation 1:1)
  promotionId       String    @unique
  promotion         Promotion @relation("PromotionToMessage", fields: [promotionId], references: [id])

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  @@map("message")
}
